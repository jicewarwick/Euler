#include "numberTheory.h"
#include <iostream>
#include <cmath>
using namespace std;

bool isOdd(const int n){
	return (n % 2);
}

bool isEven(const int n){
	return (! (n % 2));
}

bool isPrime(unsigned const long long n){
	bool ret = 1;
	if (n < 2){
		ret = 0;
	}
	int upper = sqrt(n);
	for (int i = 2; i <= upper; i++) {
		if (n % i == 0) {
			ret = 0;
			//cout << n << "/" << i << "= 0"<< endl;
			break;
		}
	}
	//cout << ret << endl;
	return ret;
}

// Pentagonal numbers are generated by the formula, Pn=n(3nâˆ’1)/2.
bool isPantagon(const int n){
	// solve by quardratic formula
	double tmp = (1 + sqrt(1 + 24 * n) ) / 6.0;
	return (tmp == ceil(tmp));
}


int largestPrimeUpTo(const int n){

	return 0;
}


int nthPrime(const unsigned int n){
	//check if database exists
	//
	//if not, perform normal calculation

	if (n == 1) {
		return 2;
	} else {
		int i = 1;
		int primetmp = 3;
		do {
			//cout << "check for " << primetmp << endl;
			if ( isPrime(primetmp) ){
				//cout << primetmp << " is a prime" << endl;
				i++;
			}
			primetmp += 2;
		} while (i < n);
		return (primetmp-2);
	}
}
bool isDivisable(int a, int b){
    return (0 == a % b);
}

int sumOfProperDivisors(int n){
	if ( n < 0) {
		return -1;
	} else if ( n == 1 || n == 0){
		return n;
	}

    int sum = 1;
	int y = ceil(sqrt(n));
    for (int i = 2; i < y; ++i) {
        if (isDivisable(n, i)) {
            sum += i;
            sum += n / i;
        }
    }
	if ( y * y == n ) {
		sum += y;
	}
    return sum;
}

// A number is perfect if it is a sum of all its proper divisors
bool isPerfect(int n){
    return (sumOfProperDivisors(n) == n);
}

// A number is deficient if the sum of all its proper divisors is less than this number
bool isDeficient(int n){
    return (sumOfProperDivisors(n) < n);
}

// A number is abundant if the sum of all its proper divisors is grater than this number
bool isAbundant(int n){
    return (sumOfProperDivisors(n) > n);
}
